{
  "openrpc": "1.0.0-rc1",
  "info": {
    "version": "1.0.0-rc4",
    "title": "enAPI OpenRPC json-rpc API",
    "description": "EnAPI backend based on OpenRPC",
    "termsOfService": "https://ethernode.io/terms/",
    "contact": {
      "name": "ethernode support",
      "email": "support@ethernode.io",
      "url": "https://ethernode.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "name": "enApi http end point",
      "url": "https://localhost:8080"
    }
  ],
  "methods": [
    {
      "name": "createUser",
      "description": "Creates a new user in the system. Duplicates are not allowed, first user is admin",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/password"
        },
        {
          "$ref": "#/components/contentDescriptors/userRole"
        }
      ],
      "result": {
        "name": "createUser",
        "description": "Retures success or error object",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Return Success"
            },
            "message": {
              "type": "string",
              "description": "Success, returns info on new user."
            }
          }
        }
      },
      "errors": [
        {
          "code": 250,
          "data": [],
          "message": "User Exists"
        }
      ],
      "examples": [
        {
          "name": "Create User Success Example",
          "description": "example of create user",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/password"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "status": "success",
              "createAccount": {
                "nodes": [],
                "_id": "5c9d42f39d69c93860c11bda",
                "userName": "bakon",
                "password": "$2b$10$mzIXwsSi9L6Z1dsqIo/oRO0xpppEudtWa34kXcsmRLTTBfO9BiXi.",
                "userRole": "admin"
              }
            }
          }
        },
        {
          "name": "Create User Error Example",
          "description": "example of create user error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/password"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    },
    {
      "name": "login",
      "description": "checks for user account and sets login variables and fetches session token.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/password"
        }
      ],
      "result": {
        "name": "login",
        "description": "Success, you will also receive an auth token, that has to be send with every api call afterwards ",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns: 'Success'"
            },
            "message": {
              "type": "string",
              "description": "Returns: user info and auth token"
            }
          }
        }
      },
      "errors": [
        {
          "code": 260,
          "data": [],
          "message": "Auth Error"
        }
      ],
      "examples": [
        {
          "name": "login",
          "description": "example of susccefull login",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/password"
            }
          ],
          "result": {
            "name": "sucess",
            "value": {
              "result": {
                "status": "success",
                "message": "Auth Success",
                "user": [
                  {
                    "nodes": [
                      {
                        "nodeId": "8108dc96ac13e4c4c56ec6e43e2371a316176322cdfa1572276612fc577619b0",
                        "nodeName": "kotti-full",
                        "nodeNetwork": "kotti"
                      }
                    ],
                    "_id": "5c8ed3b654ab7b0efcde242f",
                    "userName": "bakon",
                    "password": "$2b$10$Gj1W.4L2M6FeClmDmbhlaeSLXtdVLk3MxmrInrDvwE83gBEt7QZMa",
                    "__v": 0
                  }
                ],
                "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWM4ZWQzYjY1NGFiN2IwZWZjZGUyNDJmIiwiaWF0IjoxNTUzODIzMTk1fQ.7f06McVnooMk6TV-TaZwRGTFuChBcH0WJIJq5QnTGZU"
              }
            }
          }
        },
        {
          "name": "Login",
          "description": "Example of login user error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/password"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    },
    {
      "name": "getUser",
      "description": "Gets user info if passed user matches. Include auth token form login in header.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        }
      ],
      "result": {
        "name": "getUser",
        "description": "Returns user info and account info",
        "schema": {
          "type": "object",
          "required": [
            "response"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "Response success"
            },
            "message": {
              "type": "string",
              "description": "returns users info and all associated params"
            }
          }
        }
      },
      "errors": [
        {
          "code": 270,
          "data": [],
          "message": "User Error"
        }
      ],
      "examples": [
        {
          "name": "getUser",
          "description": "example of susccefull user info fetch",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success",
                "account": {
                  "nodes": [
                    {
                      "nodeId": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf",
                      "nodeName": "kotti-full",
                      "nodeNetwork": "kotti"
                    }
                  ],
                  "_id": "5c8ed3b654ab7b0efcde242f",
                  "userName": "bakon",
                  "password": "$2b$10$Gj1W.4L2M6FeClmDmbhlaeSLXtdVLk3MxmrInrDvwE83gBEt7QZMa",
                  "__v": 0
                },
                "accounts": "yes"
              }
            }
          }
        },
        {
          "name": "getUser",
          "description": "Example of error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "password",
              "value": "test"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {}
            }
          }
        }
      ]
    },
    {
      "name": "addNode",
      "description": "Spin up a docker container with node settings specified in the dashboard. Include auth token form login in header.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeName"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeNetwork"
        },
        {
          "$ref": "#/components/contentDescriptors/syncType"
        }
      ],
      "result": {
        "name": "addNode",
        "description": "Return node creations status",
        "schema": {
          "type": "object",
          "required": [
            "response"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns: 'Success'"
            },
            "message": {
              "type": "string",
              "description": "If returns node docker container info"
            }
          }
        }
      },
      "examples": [
        {
          "name": "addNode",
          "description": "example of susccefull node added",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "$ref": "#/components/examples/syncType"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success",
                "message": "Node Added",
                "data": {
                  "containerID": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
                }
              }
            }
          }
        },
        {
          "name": "addNode",
          "description": "Example of error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/password"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {}
            }
          }
        }
      ]
    },
    {
      "name": "removeNode",
      "description": "Remove the docker container that is running the selected node to remove. Include auth token form login in header.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/containerId"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeName"
        }
      ],
      "result": {
        "name": "removeNode",
        "description": "Returns status of node deletion",
        "schema": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns Success"
            },
            "message": {
              "type": "string",
              "description": "Returns deletion info"
            }
          }
        }
      },
      "examples": [
        {
          "name": "removeNode",
          "description": "Example of node detroy success",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/containerId"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success"
              }
            }
          }
        },
        {
          "name": "removeNode",
          "description": "Example of node destroy error",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "containerId",
              "type": "string",
              "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {
                "error": "error message"
              }
            }
          }
        }
      ]
    },
    {
      "name": "getNodeContainerInfo",
      "description": "Inspect the docker container which is running the node. Include auth token form login in header.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/containerId"
        }
      ],
      "result": {
        "name": "getNodeContainer",
        "description": "Returns infromation about the docker contianer that is running the node client",
        "schema": {
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns: 'Success'"
            },
            "message": {
              "type": "string",
              "description": "Returns info about docker contianer node is running in."
            }
          }
        }
      },
      "examples": [
        {
          "name": "getNodeContainer",
          "description": "example of successful node info fetch",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "name": "containerId",
              "type": "string",
              "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
            }
          ],
          "result": {
            "name": "success",
            "value": {
              "result": {
                "status": "success",
                "nodeInspect": {
                  "containerID": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf",
                  "containerCreated": "2019-03-29T03:16:10.371956508Z",
                  "containerState": "running",
                  "NetWorkSettings": {
                    "containerIP": "172.17.0.3",
                    "rcpPort": "33076"
                  }
                },
                "nodeData": {
                  "_id": "5c8ed3b654ab7b0efcde242f",
                  "nodes": [
                    {
                      "nodeId": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf",
                      "nodeName": "kotti-full",
                      "nodeNetwork": "kotti"
                    }
                  ]
                }
              }
            }
          }
        },
        {
          "name": "getNodeContainer",
          "description": "Example of error",
          "params": [
            {
              "name": "userName",
              "value": "bakon"
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": {
                "error": "error message"
              }
            }
          }
        }
      ]
    },
    {
      "name": "web3_clientVersion",
      "description": "Returns the current client version.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeName"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeNetwork"
        },
        {
          "name": "method",
          "description": "method being called, web3_clientVersion",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "params",
          "description": "Parameters required for the web3 call, none",
          "required": true,
          "schema": {
            "type": "array"
          }
        }
      ],
      "result": {
        "name": "web3_clientVersion",
        "description": "Returns the current node client version",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns: 'Success'"
            },
            "message": {
              "type": "string",
              "description": "Returns the current node client version"
            }
          }
        }
      },
      "examples": [
        {
          "name": "web3_clientVersion",
          "description": "Display Client Version Success, Example of web3_clientVersion",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "web3_clientVersion",
            "value": {
              "result": {
                "jsonrpc": "2.0",
                "id": 42,
                "result": "Geth/bakon-kotti-full/v1.8.23-stable-f1b192d5/linux-arm64/go1.10.4"
              }
            }
          }
        },
        {
          "name": "web3_clientVersion",
          "description": "node query error example",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    },
    {
      "name": "net_version",
      "description": "Returns the current network id of queried node",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/userName"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeName"
        },
        {
          "$ref": "#/components/contentDescriptors/nodeNetwork"
        },
        {
          "name": "method",
          "description": "method being called, net_version",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "params",
          "description": "Parameters required for the web3 call, none, pass empty array",
          "required": true,
          "schema": {
            "type": "array"
          }
        }
      ],
      "result": {
        "name": "net_version",
        "description": "Returns the current network id.",
        "schema": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "description": "Returns: 'Success'"
            },
            "message": {
              "type": "string",
              "description": "Returns the current network id of quered node"
            }
          }
        }
      },
      "examples": [
        {
          "name": "Returns the current network id.",
          "description": "Example Returns the current network id.",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "net_version",
            "value": {
              "result": {
                "jsonrpc": "2.0",
                "id": 42,
                "result": "6"
              }
            }
          }
        },
        {
          "name": "net_version",
          "description": "node query error example",
          "params": [
            {
              "$ref": "#/components/examples/userName"
            },
            {
              "$ref": "#/components/examples/nodeName"
            },
            {
              "$ref": "#/components/examples/nodeNetwork"
            },
            {
              "name": "params",
              "type": "array",
              "value": []
            }
          ],
          "result": {
            "name": "error",
            "value": {
              "status": "error",
              "message": "error message"
            }
          }
        }
      ]
    }
  ],
  "components": {
    "contentDescriptors": {
      "userName": {
        "name": "userName",
        "description": "user name",
        "required": true,
        "schema": {
          "title": "userName",
          "type": "string"
        }
      },
      "password": {
        "name": "password",
        "description": "user password",
        "required": true,
        "schema": {
          "title": "password",
          "type": "string"
        }
      },
      "userRole": {
        "name": "userRole",
        "description": "user role, first user is Admin by default",
        "required": true,
        "schema": {
          "title": "userRole",
          "type": "string"
        }
      },
      "containerId": {
        "name": "containerId",
        "description": "docker container ID, returned with getUser method",
        "required": true,
        "schema": {
          "title": "containerId",
          "type": "string"
        }
      },
      "nodeName": {
        "name": "nodeName",
        "description": "Name of the node being queried",
        "required": true,
        "schema": {
          "title": "nodeName",
          "type": "string"
        }
      },
      "nodeNetwork": {
        "name": "nodeNetwork",
        "description": "blockchain network this node is on",
        "required": true,
        "schema": {
          "title": "nodeNetwork",
          "type": "string"
        }
      },
      "syncType": {
        "name": "syncType",
        "description": "Choose between LIGHT, FAST, FULL, FUll - Archive sync",
        "required": true,
        "schema": {
          "title": "syncType",
          "type": "string"
        }
      },
      "authToken": {
        "name": "authToken",
        "description": "Authorization token you receive at login, needs to be assed in header as Key: Authorization, Value: BEARER {{token}}",
        "required": true,
        "schema": {
          "title": "authToken",
          "type": "string"
        }
      }
    },
    "examples": {
      "userName": {
        "name": "userName",
        "type": "string",
        "summary": "user of the name",
        "description": "Username used to login",
        "value": "bakon"
      },
      "password": {
        "name": "password",
        "type": "string",
        "summary": "password of the use",
        "description": "Users Passwordt",
        "value": "test"
      },
      "userRole": {
        "name": "userRole",
        "type": "string",
        "summary": "Role of user first account is always Admin",
        "description": "Role of user first account is always Admin",
        "value": "admin"
      },
      "containerId": {
        "name": "containerId",
        "type": "string",
        "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"
      },
      "nodeName": {
        "name": "nodeName",
        "type": "string",
        "summary": "name of node in question",
        "description": "just the name of the node",
        "value": "kotti-full"
      },
      "nodeNetwork": {
        "name": "nodeNetwork",
        "type": "string",
        "summary": "blockchain network the node is running",
        "description": "The blockchain network of the node",
        "value": "kotti"
      },
      "syncType": {
        "name": "syncType",
        "type": "string",
        "summary": "Type of sync the node is performing",
        "description": "Is this node a Light, Full, or Full - Archive sync",
        "value": "full"
      }
    }
  }
}