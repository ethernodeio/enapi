
// Code generated by @open-rpc/client-generator DO NOT EDIT.
import { RequestManager, WebSocketTransport, HTTPTransport, Client } from "@open-rpc/client-js";
import _ from "lodash";
import { OpenRPC, MethodObject, ContentDescriptorObject } from "@open-rpc/meta-schema";
import { MethodCallValidator } from "@open-rpc/schema-utils-js";

export type UserName = string;
export type Password = string;
export type UserRole = string;
export type JWTtoken = string;
export type UserId = string;
export type NodeName = string;
export type NodeNetwork = string;
export type SyncType = string;
export type RpcApi = boolean;
export type WsApi = boolean;
export type ContainerId = string;
export type RemoveNodeData = boolean;
export type StringWxzVcTo3 = string;
export type ArrayFGWP0Dez = any[];
export type NumberYqdpe1HS = number;
/**
 * Return Success
 */
export type StringSGZH347X = string;
/**
 * Success, returns info on new user.
 */
export type StringKuNVVqJv = string;
export interface ObjectNHLhFIFl {
  status?: StringSGZH347X;
  message?: StringKuNVVqJv;
  [k: string]: any;
}
/**
 * Returns user removed result
 */
export type StringKHMWI8OO = string;
export interface ObjectZRmUiMep {
  status?: StringSGZH347X;
  message?: StringKHMWI8OO;
  [k: string]: any;
}
/**
 * Returns: 'Success'
 */
export type StringFR9VhzBk = string;
/**
 * Returns: user info and auth token
 */
export type StringWTDZtpEb = string;
export interface ObjectOanxQUxa {
  status?: StringFR9VhzBk;
  message?: StringWTDZtpEb;
  [k: string]: any;
}
/**
 * Response success
 */
export type StringKW7DOpmn = string;
/**
 * returns users info and all associated params
 */
export type StringG5Vc2T7D = string;
export interface ObjectEGqXlYqR {
  status?: StringKW7DOpmn;
  message?: StringG5Vc2T7D;
  [k: string]: any;
}
/**
 * If returns node docker container info
 */
export type StringQmGR35SX = string;
export interface ObjectIL7S6IdL {
  status?: StringFR9VhzBk;
  message?: StringQmGR35SX;
  [k: string]: any;
}
/**
 * Returns Success
 */
export type StringA1LMV4Zp = string;
/**
 * Returns deletion info
 */
export type StringYGoRXuV3 = string;
export interface UnknownRW4RPe8Q {
  status?: StringA1LMV4Zp;
  message?: StringYGoRXuV3;
  [k: string]: any;
}
/**
 * Returns info about docker contianer node is running in.
 */
export type StringNY9Xcoeh = string;
export interface Unknown2ORpcQKq {
  status?: StringFR9VhzBk;
  message?: StringNY9Xcoeh;
  [k: string]: any;
}
/**
 * Returns: 'success'
 */
export type StringCbmORhHY = string;
/**
 * Returns solidity code in bytecode, warnings and other params
 */
export type StringFrQLE1G0 = string;
export interface ObjectIkayGOO9 {
  status?: StringCbmORhHY;
  message?: StringFrQLE1G0;
  [k: string]: any;
}
/**
 * Returns the web3 call data from your node
 */
export type StringJcFBdu7C = string;
export interface ObjectJWqpyTMC {
  status?: StringFR9VhzBk;
  message?: StringJcFBdu7C;
  [k: string]: any;
}
export type CreateUser = (userName: UserName, password: Password, userRole: UserRole) => Promise<ObjectNHLhFIFl>;
export type DeleteUser = (JWTtoken: JWTtoken, userId: UserId) => Promise<ObjectZRmUiMep>;
export type Login = (userName: UserName, password: Password) => Promise<ObjectOanxQUxa>;
export type GetUser = (JWTtoken: JWTtoken, userName: UserName) => Promise<ObjectEGqXlYqR>;
export type AddNode = (JWTtoken: JWTtoken, userName: UserName, nodeName: NodeName, nodeNetwork: NodeNetwork, syncType: SyncType, rpcApi: RpcApi, wsApi: WsApi) => Promise<ObjectIL7S6IdL>;
export type RemoveNode = (JWTtoken: JWTtoken, userName: UserName, containerId: ContainerId, nodeName: NodeName, removeNodeData: RemoveNodeData) => Promise<UnknownRW4RPe8Q>;
export type GetNodeContainerInfo = (JWTtoken: JWTtoken, containerId: ContainerId) => Promise<Unknown2ORpcQKq>;
export type SolCompile = (solVersion: StringWxzVcTo3, solCode: StringWxzVcTo3) => Promise<ObjectIkayGOO9>;
export type EthRpcCall = (userName: UserName, nodeName: NodeName, nodeNetwork: NodeNetwork, web3callMethod: StringWxzVcTo3, web3callParams: ArrayFGWP0Dez, rpcId: NumberYqdpe1HS) => Promise<ObjectJWqpyTMC>;

export interface Options {
  transport: {
    type: "websocket" | "http" | "https";
    host: string;
    port: number;
    path?: string;
  };
}

export class EnAPIOpenRPCJsonRpcAPI {
  public rpc: Client;
  private validator: MethodCallValidator;
  private openrpcDocument: OpenRPC;

  constructor(options: Options) {
    this.openrpcDocument = {"openrpc": "1.0.0-rc1", "info": {"version": "1.0.0-rc4", "title": "enAPI OpenRPC json-rpc API", "description": "EnAPI backend based on OpenRPC", "termsOfService": "https://ethernode.io/terms/", "contact": {"name": "ethernode support", "email": "support@ethernode.io", "url": "https://ethernode.io"}, "license": {"name": "Apache 2.0", "url": "https://www.apache.org/licenses/LICENSE-2.0.html"}}, "servers": [{"name": "enApi http end point", "url": "https://localhost:8080"}, {"name": "enApi websocket end point ", "url": "https://localhost:8005"}], "methods": [{"name": "createUser", "description": "Creates a new user in the system. Duplicates are not allowed, first user is admin", "params": [{"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}, {"name": "password", "description": "user password", "required": true, "schema": {"title": "password", "type": "string"}}, {"name": "userRole", "description": "user role, first user is Admin by default", "required": true, "schema": {"title": "userRole", "type": "string"}}], "result": {"name": "createUser", "description": "Retures success or error object", "schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Return Success"}, "message": {"type": "string", "description": "Success, returns info on new user."}}}}, "errors": [{"code": 250, "data": [], "message": "User Exists"}], "examples": [{"name": "Create User Success Example", "description": "example of create user", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "password", "type": "string", "summary": "password of the use", "description": "Users Passwordt", "value": "test"}], "result": {"name": "success", "value": {"status": "success", "message": "account Created"}}}, {"name": "Create User Error Example", "description": "example of create user error", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "password", "type": "string", "summary": "password of the use", "description": "Users Passwordt", "value": "test"}], "result": {"name": "error", "value": {"status": "error", "message": "error message"}}}]}, {"name": "deleteUser", "description": "Removes user and any running nodes for that user, only admin can remove users", "params": [{"name": "JWTtoken", "description": "JWT Token needed with this call gained on login", "required": true, "schema": {"title": "JWTtoken", "type": "string"}}, {"name": "userId", "description": "user Id", "required": true, "schema": {"title": "userId", "type": "string"}}], "result": {"name": "deleteUser", "description": "Returns remove user success", "schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Return Success"}, "message": {"type": "string", "description": "Returns user removed result"}}}}, "errors": [{"code": 250, "data": [], "message": "User Doesnot exist"}], "examples": [{"name": "Delete User Success Example", "description": "example of delete user", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "userId", "type": "string", "summary": "auto generated on creation unique user id", "description": "mongodb auto generate unique user id", "value": "cv9x7v98sdv09sdiv09"}], "result": {"name": "success", "value": {"status": "success", "message": "account Deleted"}}}, {"name": "Delete User Error Example", "description": "example of delete user error", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "userId", "type": "string", "summary": "auto generated on creation unique user id", "description": "mongodb auto generate unique user id", "value": "cv9x7v98sdv09sdiv09"}], "result": {"name": "error", "value": {"status": "error", "message": "User doesn't exist"}}}]}, {"name": "login", "description": "checks for user account and sets login variables and fetches JWT token.", "params": [{"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}, {"name": "password", "description": "user password", "required": true, "schema": {"title": "password", "type": "string"}}], "result": {"name": "login", "description": "Success, you will also receive an JWT token, that has to be send in the header with every api call afterwards ", "schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Returns: 'Success'"}, "message": {"type": "string", "description": "Returns: user info and auth token"}}}}, "errors": [{"code": 260, "data": [], "message": "Auth Error"}], "examples": [{"name": "login", "description": "example of susccefull login", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "password", "type": "string", "summary": "password of the use", "description": "Users Passwordt", "value": "test"}], "result": {"name": "sucess", "value": {"result": {"status": "success", "message": "Auth Success", "user": [{"nodes": [{"nodeId": "8108dc96ac13e4c4c56ec6e43e2371a316176322cdfa1572276612fc577619b0", "nodeName": "kotti-full", "nodeNetwork": "kotti"}], "_id": "5c8ed3b654ab7b0efcde242f", "userName": "bakon", "password": "$2b$10$Gj1W.4L2M6FeClmDmbhlaeSLXtdVLk3MxmrInrDvwE83gBEt7QZMa", "__v": 0}], "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWM4ZWQzYjY1NGFiN2IwZWZjZGUyNDJmIiwiaWF0IjoxNTUzODIzMTk1fQ.7f06McVnooMk6TV-TaZwRGTFuChBcH0WJIJq5QnTGZU"}}}}, {"name": "Login", "description": "Example of login user error", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "password", "type": "string", "summary": "password of the use", "description": "Users Passwordt", "value": "test"}], "result": {"name": "error", "value": {"status": "error", "message": "error message"}}}]}, {"name": "getUser", "description": "Gets user info if passed user matches. Include JWT token as param0.", "params": [{"name": "JWTtoken", "description": "JWT Token needed with this call gained on login", "required": true, "schema": {"title": "JWTtoken", "type": "string"}}, {"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}], "result": {"name": "getUser", "description": "Returns user info and account info", "schema": {"type": "object", "required": ["response"], "properties": {"status": {"type": "string", "description": "Response success"}, "message": {"type": "string", "description": "returns users info and all associated params"}}}}, "errors": [{"code": 270, "data": [], "message": "User Error"}], "examples": [{"name": "getUser", "description": "example of susccefull user info fetch", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}], "result": {"name": "success", "value": {"result": {"nodes": [{"nodeId": "2285bc02c1b2403ab12d09a24ffbf60151a916a40af574c42335c528e95294e8", "nodeName": "kotti", "nodeNetwork": "kotti"}], "_id": "5d26de405a9b4e10927f3527", "userName": "bakon3", "userRole": "admin", "__v": 0}}}}, {"name": "getUser", "description": "Example of error", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "password", "value": "test"}], "result": {"name": "error", "value": {"status": "error", "message": {}}}}]}, {"name": "addNode", "description": "Spin up a docker container with node node settings, pass \"ethnet\" if you're spinning up Ethereum Mainnet.", "params": [{"name": "JWTtoken", "description": "JWT Token needed with this call gained on login", "required": true, "schema": {"title": "JWTtoken", "type": "string"}}, {"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}, {"name": "nodeName", "description": "Name of the node being queried", "required": true, "schema": {"title": "nodeName", "type": "string"}}, {"name": "nodeNetwork", "description": "blockchain network this node is on", "required": true, "schema": {"title": "nodeNetwork", "type": "string"}}, {"name": "syncType", "description": "Choose between LIGHT, FAST, FULL, FUll - Archive sync", "required": true, "schema": {"title": "syncType", "type": "string"}}, {"name": "rpcApi", "description": "Enables json-rpc api of node client over http: default port 8545", "required": true, "schema": {"title": "rpcApi", "type": "boolean"}}, {"name": "wsApi", "description": "Enables json-rpc api of node client over websocket: default port 8546", "required": true, "schema": {"title": "wsApi", "type": "boolean"}}], "result": {"name": "addNode", "description": "Return node creations status", "schema": {"type": "object", "required": ["response"], "properties": {"status": {"type": "string", "description": "Returns: 'Success'"}, "message": {"type": "string", "description": "If returns node docker container info"}}}}, "examples": [{"name": "addNode", "description": "example of susccefull node added", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "nodeName", "type": "string", "summary": "name of node in question", "description": "just the name of the node", "value": "kotti-full"}, {"name": "nodeNetwork", "type": "string", "summary": "blockchain network the node is running", "description": "The blockchain network of the node", "value": "kotti"}, {"name": "syncType", "type": "string", "summary": "Type of sync the node is performing", "description": "Is this node a Light, Full, or Full - Archive sync", "value": "full"}], "result": {"name": "success", "value": {"result": {"status": "success", "message": "Node Added", "data": {"containerID": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"}}}}}, {"name": "addNode", "description": "Example of error", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "password", "type": "string", "summary": "password of the use", "description": "Users Passwordt", "value": "test"}], "result": {"name": "error", "value": {"status": "error", "message": {}}}}]}, {"name": "removeNode", "description": "Remove the docker container that is running the selected node to remove. Include JWT token as arg 0.", "params": [{"name": "JWTtoken", "description": "JWT Token needed with this call gained on login", "required": true, "schema": {"title": "JWTtoken", "type": "string"}}, {"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}, {"name": "containerId", "description": "docker container ID, returned with getUser method", "required": true, "schema": {"title": "containerId", "type": "string"}}, {"name": "nodeName", "description": "Name of the node being queried", "required": true, "schema": {"title": "nodeName", "type": "string"}}, {"name": "removeNodeData", "description": "pass boolean to let api know if node data should be removed when deleting the node: default is yes", "required": true, "schema": {"title": "removeNodeData", "type": "boolean"}}], "result": {"name": "removeNode", "description": "Returns status of node deletion", "schema": {"properties": {"status": {"type": "string", "description": "Returns Success"}, "message": {"type": "string", "description": "Returns deletion info"}}}}, "examples": [{"name": "removeNode", "description": "Example of node detroy success", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "containerId", "type": "string", "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"}], "result": {"name": "success", "value": {"result": {"status": "success"}}}}, {"name": "removeNode", "description": "Example of node destroy error", "params": [{"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "containerId", "type": "string", "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"}], "result": {"name": "error", "value": {"status": "error", "message": {"error": "error message"}}}}]}, {"name": "getNodeContainerInfo", "description": "Inspect the docker container which is running the node. Include auth token form login in header.", "params": [{"name": "JWTtoken", "description": "JWT Token needed with this call gained on login", "required": true, "schema": {"title": "JWTtoken", "type": "string"}}, {"name": "containerId", "description": "docker container ID, returned with getUser method", "required": true, "schema": {"title": "containerId", "type": "string"}}], "result": {"name": "getNodeContainer", "description": "Returns infromation about the docker contianer that is running the node client", "schema": {"properties": {"status": {"type": "string", "description": "Returns: 'Success'"}, "message": {"type": "string", "description": "Returns info about docker contianer node is running in."}}}}, "examples": [{"name": "getNodeContainer", "description": "example of successful node info fetch", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "containerId", "type": "string", "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"}], "result": {"name": "success", "value": {"result": {"status": "success", "containerID": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf", "containerCreated": "2019-03-29T03:16:10.371956508Z", "containerState": "running", "rcpPort": "33076", "wsPort": "33077"}}}}, {"name": "getNodeContainer", "description": "Example of error", "params": [{"name": "userName", "value": "bakon"}], "result": {"name": "error", "value": {"status": "error", "message": {"error": "error message"}}}}]}, {"name": "sol_compile", "description": "Compile smart contract written in Solidity into bytecode for Ethereum based blockchain", "params": [{"name": "solVersion", "description": "Version of solidity to compile with, please make sure the Blokchain netowrk is compatible with your chosen version of Solidity.", "required": true, "schema": {"type": "string"}}, {"name": "solCode", "description": "Solidity code to be compiled into bytecode", "required": true, "schema": {"type": "string"}}], "result": {"name": "sol_compile", "description": "Returns solidity code in bytecode, warnings and other params. Return whole code with 0 spaces and whitespace", "schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Returns: 'success'"}, "message": {"type": "string", "description": "Returns solidity code in bytecode, warnings and other params"}}}}}, {"name": "ethRpcCall", "description": "Make a web3 call to your node: view list of calls here: https://github.com/etclabscore/ethereum-json-rpc-specification ", "params": [{"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}, {"name": "nodeName", "description": "Name of the node being queried", "required": true, "schema": {"title": "nodeName", "type": "string"}}, {"name": "nodeNetwork", "description": "blockchain network this node is on", "required": true, "schema": {"title": "nodeNetwork", "type": "string"}}, {"name": "web3callMethod", "description": "jsonRpc call you want to make to your node", "required": true, "schema": {"type": "string"}}, {"name": "web3callParams", "description": "Params required for web3 call, pass empty array of none", "required": true, "schema": {"type": "array"}}, {"name": "rpcId", "description": "jason-rpc 3.0 spec Id for call", "required": true, "schema": {"type": "number"}}], "result": {"name": "web3callResult", "description": "Returns the data from your node", "schema": {"type": "object", "properties": {"status": {"type": "string", "description": "Returns: 'Success'"}, "message": {"type": "string", "description": "Returns the web3 call data from your node"}}}}, "examples": [{"name": "web3_clientVersion", "description": "Display Client Version Success, Example of web3_clientVersion", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, {"name": "nodeName", "type": "string", "summary": "name of node in question", "description": "just the name of the node", "value": "kotti-full"}, {"name": "nodeNetwork", "type": "string", "summary": "blockchain network the node is running", "description": "The blockchain network of the node", "value": "kotti"}, {"name": "web3callMethod", "type": "string", "value": "web3_clientVersion"}, {"name": "web3callParams", "type": "array", "value": []}], "result": {"name": "web3_clientVersion", "value": {"result": {"jsonrpc": "2.0", "id": 42, "result": "Geth/bakon-kotti-full/v1.8.23-stable-f1b192d5/linux-arm64/go1.10.4"}}}}, {"name": "web3_clientVersion", "description": "node query error example", "params": [{"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, {"name": "nodeName", "type": "string", "summary": "name of node in question", "description": "just the name of the node", "value": "kotti-full"}, {"name": "nodeNetwork", "type": "string", "summary": "blockchain network the node is running", "description": "The blockchain network of the node", "value": "kotti"}, {"name": "web3callMethod", "type": "string", "value": "web3_clientVersion"}, {"name": "web3callParams", "type": "array", "value": []}, {"name": "rpcId", "type": "number", "value": "42"}], "result": {"name": "error", "value": {"status": "error", "message": "error message"}}}]}], "components": {"contentDescriptors": {"userId": {"name": "userId", "description": "user Id", "required": true, "schema": {"title": "userId", "type": "string"}}, "userName": {"name": "userName", "description": "user name", "required": true, "schema": {"title": "userName", "type": "string"}}, "password": {"name": "password", "description": "user password", "required": true, "schema": {"title": "password", "type": "string"}}, "userRole": {"name": "userRole", "description": "user role, first user is Admin by default", "required": true, "schema": {"title": "userRole", "type": "string"}}, "JWTtoken": {"name": "JWTtoken", "description": "JWT Token needed with this call gained on login", "required": true, "schema": {"title": "JWTtoken", "type": "string"}}, "containerId": {"name": "containerId", "description": "docker container ID, returned with getUser method", "required": true, "schema": {"title": "containerId", "type": "string"}}, "nodeName": {"name": "nodeName", "description": "Name of the node being queried", "required": true, "schema": {"title": "nodeName", "type": "string"}}, "nodeNetwork": {"name": "nodeNetwork", "description": "blockchain network this node is on", "required": true, "schema": {"title": "nodeNetwork", "type": "string"}}, "syncType": {"name": "syncType", "description": "Choose between LIGHT, FAST, FULL, FUll - Archive sync", "required": true, "schema": {"title": "syncType", "type": "string"}}, "rpcApi": {"name": "rpcApi", "description": "Enables json-rpc api of node client over http: default port 8545", "required": true, "schema": {"title": "rpcApi", "type": "boolean"}}, "wsApi": {"name": "wsApi", "description": "Enables json-rpc api of node client over websocket: default port 8546", "required": true, "schema": {"title": "wsApi", "type": "boolean"}}, "web3params": {"name": "web3params", "description": "Parameters required for the web3 call, if none pass empty array", "required": true, "schema": {"title": "web3params", "type": "array"}}, "removeNodeData": {"name": "removeNodeData", "description": "pass boolean to let api know if node data should be removed when deleting the node: default is yes", "required": true, "schema": {"title": "removeNodeData", "type": "boolean"}}}, "examples": {"JWTtoken": {"name": "JWTtoken", "type": "string", "summary": "JWT token provided after login", "description": "JWT token provided after login", "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX0lkIjoiNWQyNDRjZDRkNWZjZjQ3MjNkZjk1MjNjIiwiaWF0IjoxNTYyNjYwMDU3fQ.Pt4aZvmEip226P3rp75UtPamjqTuZTqcy4UH9vEzKTk"}, "userId": {"name": "userId", "type": "string", "summary": "auto generated on creation unique user id", "description": "mongodb auto generate unique user id", "value": "cv9x7v98sdv09sdiv09"}, "userName": {"name": "userName", "type": "string", "summary": "user of the name", "description": "Username used to login", "value": "bakon"}, "password": {"name": "password", "type": "string", "summary": "password of the use", "description": "Users Passwordt", "value": "test"}, "userRole": {"name": "userRole", "type": "string", "summary": "Role of user first account is always Admin", "description": "Role of user first account is always Admin", "value": "admin"}, "containerId": {"name": "containerId", "type": "string", "value": "e62282029b4490e1f2198d71a724eefb7738cf4114cb55d486384fff9464d6cf"}, "nodeName": {"name": "nodeName", "type": "string", "summary": "name of node in question", "description": "just the name of the node", "value": "kotti-full"}, "nodeNetwork": {"name": "nodeNetwork", "type": "string", "summary": "blockchain network the node is running", "description": "The blockchain network of the node", "value": "kotti"}, "syncType": {"name": "syncType", "type": "string", "summary": "Type of sync the node is performing", "description": "Is this node a Light, Full, or Full - Archive sync", "value": "full"}, "rpcApi": {"name": "rpcApi", "type": "boolean", "summary": "Enable or Disable rpc api on node client over http", "description": "Enable or Disable rpc api on node client over http", "value": "true"}, "wsApi": {"name": "wsApi", "type": "boolean", "summary": "Enable or Disable rpc api on node client over websocket", "description": "Enable or Disable rpc api on node client over websocket", "value": "true"}, "web3params": {"name": "web3params", "type": "array", "summary": "Parameters required for the web3 call, if none pass empty array", "description": "Parameters required for the web3 call, if none pass empty array", "value": "[]"}}}};

    if (options.transport === undefined || options.transport.type === undefined) {
      throw new Error("Invalid constructor params");
    }
    const {type, host, port} = options.transport;
    let path = options.transport.path || "";
    if (path && path[0] !== "/") {
        path = "/" + path;
    }
    let transport;
    switch (type) {
      case "http":
      case "https":
        transport = new HTTPTransport(type + "://" + host + ":" + port + path);
        break;
      case "websocket":
        transport = new WebSocketTransport("ws://" + host + ":" + port + path);
        break;
      default:
        throw new Error("unsupported transport");
        break;
    }
    this.rpc = new Client(new RequestManager([transport]));
    this.validator = new MethodCallValidator(this.openrpcDocument);
  }

  /**
   * Initiates [[EnAPIOpenRPCJsonRpcAPI.startBatch]] in order to build a batch call.
   *
   * Subsequent calls to [[EnAPIOpenRPCJsonRpcAPI.request]] will be added to the batch.
   * Once [[EnAPIOpenRPCJsonRpcAPI.stopBatch]] is called, the promises for the [[EnAPIOpenRPCJsonRpcAPI.request]]
   * will then be resolved.  If there is already a batch in progress this method is a noop.
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public startBatch(): void {
    return this.rpc.startBatch();
  }

  /**
   * Initiates [[Client.stopBatch]] in order to finalize and send the batch to the underlying transport.
   *
   * stopBatch will send the [[EnAPIOpenRPCJsonRpcAPI]] calls made since the last [[EnAPIOpenRPCJsonRpcAPI.startBatch]] call. For
   * that reason, [[EnAPIOpenRPCJsonRpcAPI.startBatch]] MUST be called before [[EnAPIOpenRPCJsonRpcAPI.stopBatch]].
   *
   * @example
   * myClient.startBatch();
   * myClient.foo().then(() => console.log("foobar"))
   * myClient.bar().then(() => console.log("foobarbaz"))
   * myClient.stopBatch();
   */
  public stopBatch(): void {
    return this.rpc.stopBatch();
  }

  /**
   *
   */
  public createUser: CreateUser = (...params) => {
    return this.request("createUser", params);
  }

  /**
   *
   */
  public deleteUser: DeleteUser = (...params) => {
    return this.request("deleteUser", params);
  }

  /**
   *
   */
  public login: Login = (...params) => {
    return this.request("login", params);
  }

  /**
   *
   */
  public getUser: GetUser = (...params) => {
    return this.request("getUser", params);
  }

  /**
   *
   */
  public addNode: AddNode = (...params) => {
    return this.request("addNode", params);
  }

  /**
   *
   */
  public removeNode: RemoveNode = (...params) => {
    return this.request("removeNode", params);
  }

  /**
   *
   */
  public getNodeContainerInfo: GetNodeContainerInfo = (...params) => {
    return this.request("getNodeContainerInfo", params);
  }

  /**
   *
   */
  public sol_compile: SolCompile = (...params) => {
    return this.request("sol_compile", params);
  }

  /**
   *
   */
  public ethRpcCall: EthRpcCall = (...params) => {
    return this.request("ethRpcCall", params);
  }

  private request(methodName: string, params: any[]): Promise<any> {
    const methodObject = _.find(this.openrpcDocument.methods, ({name}) => name === methodName) as MethodObject;
    const openRpcMethodValidationErrors = this.validator.validate(methodName, params);
    if (openRpcMethodValidationErrors.length > 0) {
      return Promise.reject(openRpcMethodValidationErrors);
    }

    let rpcParams;
    if (methodObject.paramStructure && methodObject.paramStructure === "by-name") {
      rpcParams = _.zipObject(params, _.map(methodObject.params, "name"));
    } else {
      rpcParams = params;
    }
    return this.rpc.request(methodName, rpcParams);
  }

}
export default EnAPIOpenRPCJsonRpcAPI;
